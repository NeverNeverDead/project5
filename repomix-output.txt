This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-16T09:57:20.923Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.editorconfig
.eslintignore
.eslintrc.js
.github/workflows/tests.yml
.gitignore
.husky/pre-commit
.prettierignore
.prettierrc.js
.storybook/main.ts
.storybook/preview.ts
.stylelintignore
.stylelintrc.json
package.json
postcss.config.js
public/index.html
README.md
src/components/app/App.module.scss
src/components/app/App.tsx
src/components/app/index.tsx
src/components/arrow-button/ArrowButton.module.scss
src/components/arrow-button/ArrowButton.tsx
src/components/arrow-button/index.tsx
src/components/article-params-form/ArticleParamsForm.module.scss
src/components/article-params-form/ArticleParamsForm.tsx
src/components/article-params-form/index.tsx
src/components/article/Article.module.scss
src/components/article/Article.tsx
src/components/article/index.tsx
src/components/button/Button.module.scss
src/components/button/Button.stories.tsx
src/components/button/Button.tsx
src/components/button/index.tsx
src/components/hooks/useClose.ts
src/components/radio-group/hooks/useEnterSubmit.ts
src/components/radio-group/index.tsx
src/components/radio-group/Option.tsx
src/components/radio-group/RadioGroup.module.scss
src/components/radio-group/RadioGroup.stories.tsx
src/components/radio-group/RadioGroup.tsx
src/components/select/helpers/isFontFamilyClass.ts
src/components/select/hooks/useEnterOptionSubmit.tsx
src/components/select/hooks/useEnterSubmit.ts
src/components/select/hooks/useOutsideClickClose.ts
src/components/select/index.tsx
src/components/select/Option.tsx
src/components/select/Select.module.scss
src/components/select/Select.stories.tsx
src/components/select/Select.tsx
src/components/separator/index.module.scss
src/components/separator/index.tsx
src/components/separator/Separator.stories.tsx
src/components/separator/Separator.tsx
src/components/spacing/index.module.scss
src/components/spacing/index.tsx
src/components/spacing/Spacing.tsx
src/components/story-decorator/index.tsx
src/components/story-decorator/StoryDecorator.module.scss
src/components/story-decorator/StoryDecorator.tsx
src/components/text/index.module.scss
src/components/text/index.tsx
src/components/text/Text.stories.tsx
src/components/text/Text.tsx
src/constants/articleProps.ts
src/custom.d.ts
src/fonts/font-files/Cormorant_Garamond/OFL.txt
src/fonts/font-files/Days_One/OFL.txt
src/fonts/font-files/Merriweather/OFL.txt
src/fonts/font-files/Open_Sans/OFL.txt
src/fonts/font-files/Open_Sans/README.txt
src/fonts/font-files/Ubuntu/UFL.txt
src/fonts/font.scss
src/images/arrow-down.svg
src/images/arrow.svg
src/images/narrow.svg
src/images/react.svg
src/images/typescript.svg
src/images/wide.svg
src/index.tsx
src/styles/index.scss
tsconfig.json
webpack/webpack.common.js
webpack/webpack.config.js
webpack/webpack.dev.js
webpack/webpack.prod.js

================================================================
Repository Files
================================================================

================
File: .editorconfig
================
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = tab
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[{*.json,*.yml}]
indent_size = 2

================
File: .eslintignore
================
node_modules
public
.eslintrc.js
storybook-static
build
dist
webpack/*.js
package*.json

================
File: .eslintrc.js
================
module.exports = {
	parser: '@typescript-eslint/parser',
	parserOptions: {
		ecmaVersion: 2020,
		sourceType: 'module',
		warnOnUnsupportedTypeScriptVersion: false,
	},
	settings: {
		react: {
			version: 'detect',
		},
		"import/resolver": {
			typescript: {
				project: "tsconfig.json",
			}
		}
	},
	extends: [
		'plugin:@typescript-eslint/recommended',
		'plugin:prettier/recommended',
		'prettier',
		'plugin:react/recommended',
		'plugin:react-hooks/recommended',
		'plugin:import/errors',
		'plugin:import/warnings',
		'plugin:import/typescript',
		'plugin:eslint-comments/recommended',
	],
	rules: {
		semi: [2, 'always'],
		quotes: [2, 'single', { avoidEscape: true }],
		'no-unused-vars': 'off',
		'@typescript-eslint/no-unused-vars': ['error'],
		'@typescript-eslint/no-var-requires': 'off',
		'react/prop-types': 'off',
		'react/jsx-uses-react': 'off',
		'react/react-in-jsx-scope': 'off',
		'@typescript-eslint/explicit-module-boundary-types': 'off',
		'react-hooks/exhaustive-deps': 'off',
		'import/no-named-as-default': 'off',
	},
};

================
File: .github/workflows/tests.yml
================
name: Tests

on:
  pull_request:
    branches:
      - main
      
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 20
    - name: Check if the repository is private
      if: ${{github.event.repository.private}}
      run: exit 1
    - name: Get testing lib
      run: set -eu && git clone https://github.com/Yandex-Practicum/tests-blog-customizer.git /tmp/tests-blog-customizer
    - name: Run tests
      run: bash /tmp/tests-blog-customizer/run.sh
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: report
        path: /tmp/tests-blog-customizer/tmp/artifacts
        retention-days: 30

================
File: .gitignore
================
node_modules/
.idea
.vscode
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.env
.env.test
build
dist
.yarn

================
File: .husky/pre-commit
================
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

npx lint-staged

================
File: .prettierignore
================
build
dist
storybook-static

================
File: .prettierrc.js
================
module.exports = {
	semi: true,
	trailingComma: 'es5',
	singleQuote: true,
	jsxSingleQuote: true,
	bracketSameLine: true,
	printWidth: 80,
	useTabs: true,
	tabWidth: 2,
	endOfLine: 'lf',
};

================
File: .storybook/main.ts
================
import type { StorybookConfig } from '@storybook/react-webpack5';
const path = require('path');

const config: StorybookConfig = {
	stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
	addons: [
		'@storybook/addon-links',
		'@storybook/addon-essentials',
		'@storybook/addon-onboarding',
		'@storybook/addon-interactions',
		'@storybook/addon-styling-webpack',
		{
			name: '@storybook/addon-styling-webpack',

			options: {
				rules: [
					{
						test: /\.css$/,
						sideEffects: true,
						use: [
							require.resolve('style-loader'),
							{
								loader: require.resolve('css-loader'),
								options: {
									// Want to add more CSS Modules options? Read more here: https://github.com/webpack-contrib/css-loader#modules
									modules: {
										auto: true,
									},
								},
							},
						],
					},
					{
						test: /\.s[ac]ss$/,
						sideEffects: true,
						use: [
							require.resolve('style-loader'),
							{
								loader: require.resolve('css-loader'),
								options: {
									// Want to add more CSS Modules options? Read more here: https://github.com/webpack-contrib/css-loader#modules
									modules: {
										auto: true,
									},
									importLoaders: 2,
								},
							},
							require.resolve('resolve-url-loader'),
							{
								loader: require.resolve('sass-loader'),
								options: {
									// Want to add more Sass options? Read more here: https://webpack.js.org/loaders/sass-loader/#options
									implementation: require.resolve('sass'),
									sourceMap: true,
									sassOptions: {},
								},
							},
						],
					},
				],
			},
		},
	],
	webpackFinal: async (config) => {
		if (config?.resolve?.alias) {
			config.resolve.alias = {
				fonts: path.resolve(__dirname, '..', './src/fonts'),
				src: path.resolve(__dirname, '..', './src'),
				components: path.resolve(__dirname, '..', './src/components'),
			};
		}

		return config;
	},
	framework: {
		name: '@storybook/react-webpack5',
		options: {
			builder: {
				useSWC: true,
			},
		},
	},
	swc: () => ({
		jsc: {
			transform: {
				react: {
					runtime: 'automatic',
				},
			},
		},
	}),
	docs: {
		autodocs: 'tag',
	},
};
export default config;

================
File: .storybook/preview.ts
================
import type { Preview } from "@storybook/react";
import { StoryDecorator } from "../src/components/story-decorator/StoryDecorator";

const preview: Preview = {
  parameters: {
    actions: { argTypesRegex: "^on[A-Z].*" },
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/i,
      },
    },
  },
  decorators: [StoryDecorator],
};

export default preview;

================
File: .stylelintignore
================
**/normalize.css
**/normalize.min.css
**/fonts/
**/images/
**/img/

================
File: .stylelintrc.json
================
{
	"extends": [
		"stylelint-config-standard-scss"
	],
	"plugins": [
		"stylelint-order"
	],
	"rules": {
		"color-no-invalid-hex": true,
		"font-family-no-duplicate-names": true,
		"function-calc-no-unspaced-operator": true,
		"function-linear-gradient-no-nonstandard-direction": true,
		"string-no-newline": true,
		"unit-no-unknown": true,
		"no-descending-specificity": [
			true,
			{
				"ignore": ["selectors-within-list"]
			}
		],
		"property-no-unknown": [
			true,
			{
				"ignoreProperties": [
					"print-color-adjust"
				]
			}
		],
		"declaration-block-no-shorthand-property-overrides": true,
		"block-no-empty": true,
		"selector-pseudo-class-no-unknown": true,
		"selector-pseudo-element-no-unknown": true,
		"selector-type-no-unknown": true,
		"media-feature-name-no-unknown": true,
		"scss/at-rule-no-unknown": true,
		"comment-no-empty": true,
		"no-empty-source": true,
		"no-invalid-double-slash-comments": true,
		"no-unknown-animations": true,
		"function-url-no-scheme-relative": true,
		"number-max-precision": 2,
		"declaration-block-single-line-max-declarations": 1,
		"comment-word-disallowed-list": [
			"todo"
		],
		"color-hex-length": "long",
		"font-family-name-quotes": "always-unless-keyword",
		"function-name-case": "lower",
		"function-url-quotes": "always",
		"length-zero-no-unit": true,
		"value-keyword-case": [
			"lower",
			{
				"ignoreKeywords": [
					"A4"
				]
			}
		],
		"declaration-empty-line-before": "never",
		"declaration-property-unit-allowed-list": {
			"line-height": []
		},
		"selector-class-pattern": "^[a-z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*(__[a-z0-9]+(-[a-z0-9]+)*)?(_[a-z0-9]+(-[a-z0-9]+)*)?(_[a-z0-9]+(-[a-z0-9]+)*)?$",
		"selector-attribute-quotes": "always",
		"selector-pseudo-element-colon-notation": "double",
		"selector-type-case": "lower",
		"rule-empty-line-before": [
			"always-multi-line",
			{
				"except": [
					"first-nested"
				]
			}
		],
		"at-rule-empty-line-before": [
			"always",
			{
				"except": [
					"blockless-after-blockless",
					"first-nested"
				]
			}
		],
		"comment-empty-line-before": [
			"always",
			{
				"except": [
					"first-nested"
				]
			}
		],
		"comment-whitespace-inside": "always",
		"order/order": [
			"custom-properties",
			"declarations"
		],
		"order/properties-order": [
			"all",
			"position",
			"top",
			"right",
			"bottom",
			"left",
			"inset",
			"inset-block-start",
			"inset-block-end",
			"inset-inline-start",
			"inset-inline-end",
			"z-index",
			"display",
			"grid-template",
			"grid-template-rows",
			"grid-template-columns",
			"grid-template-areas",
			"grid-auto-rows",
			"grid-auto-columns",
			"grid-auto-flow",
			"grid-area",
			"grid-row",
			"grid-column",
			"grid-row-start",
			"grid-row-end",
			"grid-column-start",
			"grid-column-end",
			"flex",
			"flex-grow",
			"flex-shrink",
			"flex-basis",
			"flex-flow",
			"flex-direction",
			"flex-wrap",
			"order",
			"justify-content",
			"justify-items",
			"justify-self",
			"align-content",
			"align-items",
			"align-self",
			"grid-gap",
			"gap",
			"grid-row-gap",
			"row-gap",
			"grid-column-gap",
			"column-gap",
			"float",
			"clear",
			"box-sizing",
			"writing-mode",
			"width",
			"min-width",
			"max-width",
			"height",
			"min-height",
			"max-height",
			"inline-size",
			"min-inline-size",
			"max-inline-size",
			"block-size",
			"min-block-size",
			"max-block-size",
			"margin",
			"margin-top",
			"margin-right",
			"margin-bottom",
			"margin-left",
			"margin-block-start",
			"margin-block-end",
			"margin-inline-start",
			"margin-inline-end",
			"padding",
			"padding-top",
			"padding-right",
			"padding-bottom",
			"padding-left",
			"padding-block-start",
			"padding-block-end",
			"padding-inline-start",
			"padding-inline-end",
			"overflow",
			"overflow-x",
			"overflow-y",
			"color",
			"font",
			"font-weight",
			"font-size",
			"font-family",
			"font-style",
			"font-display",
			"font-variant",
			"font-size-adjust",
			"font-stretch",
			"font-effect",
			"font-emphasize",
			"font-emphasize-position",
			"font-emphasize-style",
			"font-smooth",
			"line-height",
			"direction",
			"letter-spacing",
			"white-space",
			"text-align",
			"text-align-last",
			"text-transform",
			"text-decoration",
			"text-emphasis",
			"text-emphasis-color",
			"text-emphasis-style",
			"text-emphasis-position",
			"text-indent",
			"text-justify",
			"text-outline",
			"text-wrap",
			"text-overflow",
			"text-overflow-ellipsis",
			"text-overflow-mode",
			"text-orientation",
			"text-shadow",
			"vertical-align",
			"word-wrap",
			"word-break",
			"word-spacing",
			"overflow-wrap",
			"tab-size",
			"hyphens",
			"unicode-bidi",
			"columns",
			"column-count",
			"column-fill",
			"column-gap",
			"column-rule",
			"column-rule-color",
			"column-rule-style",
			"column-rule-width",
			"column-span",
			"column-width",
			"page-break-after",
			"page-break-before",
			"page-break-inside",
			"src",
			"list-style",
			"list-style-position",
			"list-style-type",
			"list-style-image",
			"table-layout",
			"empty-cells",
			"caption-side",
			"background",
			"background-color",
			"background-image",
			"background-repeat",
			"background-position",
			"background-position-x",
			"background-position-y",
			"background-size",
			"background-clip",
			"background-origin",
			"background-attachment",
			"background-blend-mode",
			"box-decoration-break",
			"border",
			"border-width",
			"border-style",
			"border-color",
			"border-top",
			"border-block-start",
			"border-top-width",
			"border-top-style",
			"border-top-color",
			"border-right",
			"border-inline-end",
			"border-right-width",
			"border-right-style",
			"border-right-color",
			"border-bottom",
			"border-block-end",
			"border-bottom-width",
			"border-bottom-style",
			"border-bottom-color",
			"border-left",
			"border-inline-start",
			"border-left-width",
			"border-left-style",
			"border-left-color",
			"border-radius",
			"border-top-left-radius",
			"border-top-right-radius",
			"border-bottom-right-radius",
			"border-bottom-left-radius",
			"border-image",
			"border-image-source",
			"border-image-slice",
			"border-image-width",
			"border-image-outset",
			"border-image-repeat",
			"border-collapse",
			"border-spacing",
			"outline",
			"outline-width",
			"outline-style",
			"outline-color",
			"outline-offset",
			"box-shadow",
			"visibility",
			"cursor",
			"mix-blend-mode",
			"backdrop-filter",
			"will-change",
			"transform",
			"transform-origin",
			"transform-style",
			"backface-visibility",
			"opacity",
			"filter",
			"perspective",
			"perspective-origin",
			"transition",
			"transition-delay",
			"transition-timing-function",
			"transition-duration",
			"transition-property",
			"animation",
			"animation-name",
			"animation-duration",
			"animation-play-state",
			"animation-timing-function",
			"animation-delay",
			"animation-iteration-count",
			"animation-direction",
			"animation-fill-mode",
			"appearance",
			"clip",
			"clip-path",
			"counter-reset",
			"counter-increment",
			"resize",
			"user-select",
			"nav-index",
			"nav-up",
			"nav-right",
			"nav-down",
			"nav-left",
			"pointer-events",
			"quotes",
			"touch-action",
			"zoom",
			"fill",
			"fill-rule",
			"clip-rule",
			"stroke",
			"stroke-width"
		]
	}
}

================
File: package.json
================
{
	"name": "blog-customizer",
	"version": "1.0.0",
	"main": "index.js",
	"license": "MIT",
	"devDependencies": {
		"@pmmmwh/react-refresh-webpack-plugin": "^0.5.10",
		"@storybook/addon-essentials": "^7.6.10",
		"@storybook/addon-interactions": "^7.6.10",
		"@storybook/addon-links": "^7.6.10",
		"@storybook/addon-onboarding": "^1.0.10",
		"@storybook/addon-styling-webpack": "^0.0.6",
		"@storybook/blocks": "^7.6.10",
		"@storybook/react": "^7.6.10",
		"@storybook/react-webpack5": "^7.6.10",
		"@storybook/test": "^7.6.10",
		"@svgr/webpack": "^8.0.1",
		"@types/react": "^18.2.0",
		"@types/react-dom": "^18.2.1",
		"@typescript-eslint/eslint-plugin": "^5.59.11",
		"@typescript-eslint/parser": "^5.59.11",
		"autoprefixer": "^10.4.14",
		"clean-webpack-plugin": "^4.0.0",
		"commitizen": "^4.3.0",
		"cross-env": "^7.0.3",
		"css-loader": "^6.8.1",
		"cssnano": "^6.0.1",
		"cz-conventional-changelog": "^3.3.0",
		"eslint": "^8.42.0",
		"eslint-config-prettier": "^8.8.0",
		"eslint-import-resolver-typescript": "^3.6.1",
		"eslint-plugin-eslint-comments": "^3.2.0",
		"eslint-plugin-import": "^2.27.5",
		"eslint-plugin-prettier": "^4.2.1",
		"eslint-plugin-react": "^7.32.2",
		"eslint-plugin-react-hooks": "^4.6.0",
		"html-webpack-plugin": "^5.5.1",
		"husky": "^8.0.3",
		"lint-staged": "^13.2.2",
		"merge": "^2.1.1",
		"mini-css-extract-plugin": "^2.7.6",
		"postcss-loader": "^7.3.3",
		"prettier": "^2.8.8",
		"react-refresh": "^0.14.0",
		"resolve-url-loader": "^5.0.0",
		"sass": "^1.69.7",
		"sass-loader": "^13.3.3",
		"storybook": "^7.6.10",
		"style-loader": "^3.3.3",
		"stylelint": "^16.1.0",
		"stylelint-config-standard-scss": "^13.0.0",
		"stylelint-order": "^6.0.3",
		"ts-loader": "^9.4.3",
		"typescript": "^5.0.4",
		"typescript-plugin-css-modules": "^5.0.1",
		"url-loader": "^4.1.1",
		"webpack": "^5.81.0",
		"webpack-cli": "^5.0.2",
		"webpack-dev-server": "^4.15.0"
	},
	"scripts": {
		"build": "cross-env NODE_ENV=production webpack --config webpack/webpack.config.js --env env=prod",
		"start": "webpack serve --config webpack/webpack.config.js --env env=dev",
		"stylelint": "stylelint \"src/**/*.scss\"",
		"stylelint:fix": "stylelint \"src/**/*.scss\" --fix",
		"lint": "eslint --fix \"./src/**/*.{js,jsx,ts,tsx,json}\"",
		"format": "prettier --write \"./src/**/*.{js,jsx,ts,tsx,json,css,scss,md}\" --ignore-path ./.prettierignore",
		"test": "npm run stylelint:fix && npm run lint && npm run format",
		"prepare": "husky install",
		"commit": "npm run test && cz",
		"storybook": "storybook dev -p 6006",
		"build-storybook": "storybook build"
	},
	"eslintConfig": {
		"extends": [
			"plugin:storybook/recommended"
		]
	},
	"dependencies": {
		"clsx": "^2.1.0",
		"react": "^18.2.0",
		"react-dom": "^18.2.0"
	},
	"lint-staged": {
		"*.{css,scss}": "npm run stylelint:fix",
		"*.{js,jsx,ts,tsx}": "npm run lint",
		"*.{js,jsx,ts,tsx,json,css,scss,md}": "npm run format"
	},
	"config": {
		"commitizen": {
			"path": "./node_modules/cz-conventional-changelog"
		}
	},
	"homepage": "./"
}

================
File: postcss.config.js
================
const autoprefixer = require('autoprefixer');
const cssnano = require('cssnano');

module.exports = {
	plugins: [autoprefixer, cssnano({ preset: 'default' })],
};

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>

  <body>
    <div id="root"></div>
  </body>
</html>

================
File: README.md
================
# Blog-customizer

**Blog-customizer** - это удобное приложение, позволяющее реализовать кастомизацию страницы блога через открывающуюся панель, а именно выбрать:

- шрифт текста,
- размер шрифта,
- цвет шрифта,
- цвет фона,
- ширина контента.

---


## Было сделано:

1. При нажатии на «стрелку» открывается сайдбар с настройками, при повторном нажатии или клике вне сайдбар закрывается.
2. При изменении настроек в сайдбаре они не применяются сразу.
3. После нажатия на «применить» стили применяются к статье.
4. При нажатии «сбросить» настройки в форме сбрасываются на начальные, которые были при открытии страницы, и стили применяются к статье.
5. Настройки устанавливаются через CSS-переменные, которые уже есть в стилях и установлены в коде в дефолтные значения.

---

## Стек

HTML, SCSS, TypeScript, React, Webpack

---

## Установка и запуск

### `Требования`

Для установки и запуска проекта, необходим NodeJS v8+.

### `Установка зависимостей`

Для установки зависимостей, выполните команду:

```
$ npm i
```

### `Запуск Development сервера`

Чтобы запустить сервер для разработки, выполните команду:

```
npm start
```

---

## Форматирование и линтинг

Для запуска линтера для стилей выполните:

```
npm run stylelint
```

Для запуска линтера выполните:

```
npm run lint
```

Для запуска форматтера выполните:

```
npm run format
```

================
File: src/components/app/App.module.scss
================
.main {
	--bg-color: #ffffff;
	background-color: var(--bg-color, #ffffff);
}

================
File: src/components/app/App.tsx
================
import styles from './App.module.scss'; // Импорт стилей (CSS модуль), которые будут использоваться в компоненте App
import { useState, CSSProperties } from 'react'; // Импорт хука useState для управления состоянием и типа CSSProperties для инлайн-стилей
import { Article } from 'components/article'; // Импорт компонента для отображения статьи
import { ArticleParamsForm } from 'components/article-params-form'; // Импорт компонента формы для настройки параметров статьи
import {
	ArticleStateType, // Тип состояния для статьи, который будет хранить параметры
	defaultArticleState, // Значение по умолчанию для состояния статьи
} from 'src/constants/articleProps'; // Импорт констант, определяющих начальные параметры статьи

// Основной компонент приложения
export const App = () => {
	// useState для хранения состояния параметров статьи (шрифт, размер, цвет и т. д.)
	const [styleArticle, setStyleArticle] =
		useState<ArticleStateType>(defaultArticleState); // Инициализация состояния с использованием начальных значений из defaultArticleState

	return (
		// Основной элемент страницы (главный блок)
		<main
			className={styles.main} // Применение стилей из импортированного CSS-модуля
			style={ // Инлайн-стили, которые будут изменяться в зависимости от состояния
				{
					'--font-family': styleArticle.fontFamilyOption.value, // Задает шрифт через CSS-переменную
					'--font-size': styleArticle.fontSizeOption.value, // Задает размер шрифта через CSS-переменную
					'--font-color': styleArticle.fontColor.value, // Задает цвет шрифта через CSS-переменную
					'--container-width': styleArticle.contentWidth.value, // Задает ширину контейнера через CSS-переменную
					'--bg-color': styleArticle.backgroundColor.value, // Задает цвет фона через CSS-переменную
				} as CSSProperties // Преобразуем объект в тип CSSProperties, чтобы TypeScript знал, что это валидные CSS-стили
			}>
			<ArticleParamsForm onChange={setStyleArticle} /> 
			<Article />
		</main>
	);
};

================
File: src/components/app/index.tsx
================
export { App } from './App';

================
File: src/components/arrow-button/ArrowButton.module.scss
================
.container {
	position: fixed;
	top: 31px;
	display: flex;
	flex-shrink: 0;
	justify-content: center;
	align-items: center;
	box-sizing: border-box;
	width: 100px;
	height: 100px;
	background-color: #000000;
	border-right: 1px;
	transition: transform 0.5s ease;
}

.container_open {
	transform: translate(616px);
}

.arrow {
	flex-shrink: 0;
	width: 48px;
	height: 48px;
	transform: rotate(180deg);
	transition: transform 0.5s ease;
}

.arrow_open {
	transform: rotate(0deg);
}

.container:hover {
	background-color: #ffc802;
}

.container:active {
	background-color: #787878;
}

================
File: src/components/arrow-button/ArrowButton.tsx
================
import clsx from 'clsx'; // Импорт библиотеки clsx для динамического применения классов
import arrow from 'src/images/arrow.svg'; // Импорт иконки стрелочки для кнопки
import styles from './ArrowButton.module.scss'; // Импорт стилей для компонента

/** Функция для обработки открытия/закрытия формы */
type ArrowButtonProps = {
    isMenuOpen: boolean; // Флаг, который указывает, открыто ли меню
    onClick: () => void; // Функция для обработки клика (открытие/закрытие)
};

// Компонент кнопки стрелочки
export const ArrowButton = ({ isMenuOpen, onClick }: ArrowButtonProps) => {
    return (
        /* Не забываем указаывать role и aria-label атрибуты для интерактивных элементов */
        <div
            onClick={onClick} // Обработчик клика на кнопку, вызывает функцию onClick
            role='button' // Устанавливаем роль как кнопку для доступности
            aria-label='Открыть/Закрыть форму параметров статьи' // Описание действия кнопки для доступности
            tabIndex={0} // Устанавливаем tabindex, чтобы элемент был фокусируемым
            className={clsx(styles.container, {
                [styles.container_open]: isMenuOpen, // Применяется класс для открытого состояния
            })}>
            <img
                src={arrow} // Используем иконку стрелочки
                alt='иконка стрелочки' // Описание изображения для доступности
                className={clsx(styles.arrow, {
                    [styles.arrow_open]: isMenuOpen, // Применяется класс для изменения состояния стрелочки
                })}
            />
        </div>
    );
};

================
File: src/components/arrow-button/index.tsx
================
export { ArrowButton } from './ArrowButton';

================
File: src/components/article-params-form/ArticleParamsForm.module.scss
================
.container {
	position: fixed;
	left: 0;
	width: 616px;
	height: 100%;
	overflow: scroll;
	transform: translate(-616px);
	transition: transform 0.5s ease;
}

.container_open {
	transform: translate(0);
}

.form {
	display: flex;
	flex-shrink: 0;
	flex-direction: column;
	box-sizing: border-box;
	height: auto;
	min-height: 100%;
	padding: 50px 31px;
	background-color: #ffffff;
	border-right: 1px solid #000000;
}

.bottomContainer {
	display: flex;
	justify-content: space-between;
	margin-top: auto;
}

================
File: src/components/article-params-form/ArticleParamsForm.tsx
================
import { useState, useRef, SyntheticEvent } from 'react'; // Импорт хуков из React: useState для состояния, useRef для ссылок на элементы и SyntheticEvent для типов событий
import { ArrowButton } from 'components/arrow-button'; // Импорт компонента кнопки со стрелочкой
import { Button } from 'components/button'; // Импорт компонента кнопки
import { Spacing } from 'components/spacing'; // Импорт компонента для добавления отступов
import { RadioGroup } from 'components/radio-group'; // Импорт компонента радио-кнопок
import { Separator } from 'components/separator'; // Импорт компонента разделителя
import { Select } from 'components/select'; // Импорт компонента выпадающего списка
import { Text } from 'components/text'; // Импорт компонента для отображения текста
import { useClose } from 'components/hooks/useClose'; // Импорт хука для закрытия меню

import {
	fontFamilyOptions, // Опции для выбора шрифта
	fontSizeOptions, // Опции для выбора размера шрифта
	fontColors, // Опции для выбора цвета шрифта
	backgroundColors, // Опции для выбора цвета фона
	contentWidthArr, // Опции для выбора ширины контента
	OptionType, // Тип для параметров опций
	ArticleStateType, // Тип для состояния параметров статьи
	defaultArticleState, // Значение по умолчанию для параметров статьи
} from 'src/constants/articleProps'; // Импорт констант с возможными значениями для параметров

import clsx from 'clsx'; // Импорт библиотеки clsx для динамического добавления классов

import styles from './ArticleParamsForm.module.scss'; // Импорт стилей компонента

export type ArticleParamsFormProps = {
	onChange: React.Dispatch<React.SetStateAction<ArticleStateType>>; // Пропс, который позволяет передавать изменения состояния параметров статьи
};

export const ArticleParamsForm = ({ onChange }: ArticleParamsFormProps) => {
	// Рефы для хранения состояния формы и ссылки на aside элемент
	const defaultStateForm = useRef<ArticleStateType>(defaultArticleState);
	const asideRef = useRef<HTMLDivElement | null>(null);

	// Локальное состояние для отслеживания, открыто ли меню
	const [isMenuOpen, setIsMenuOpen] = useState<boolean>(false);

	// Состояния для каждого параметра статьи
	const [fontFamily, setfontFamily] = useState<OptionType>(defaultStateForm.current.fontFamilyOption);
	const [fontSize, setfontSize] = useState<OptionType>(defaultStateForm.current.fontSizeOption);
	const [backgroundColor, setBackgroundColor] = useState<OptionType>(defaultStateForm.current.backgroundColor);
	const [fontColor, setFontColor] = useState<OptionType>(defaultStateForm.current.fontColor);
	const [contentWidth, setContentWidth] = useState<OptionType>(defaultStateForm.current.contentWidth);

	// Хук для закрытия меню при клике вне его области
	useClose({
		isOpen: isMenuOpen,
		onClose: () => setIsMenuOpen(false),
		rootRef: asideRef,
	});

	// Функция для переключения состояния меню
	const toggleStateMenu = () => {
		setIsMenuOpen((prev) => !prev);
	};

	// Функции для изменения параметров статьи
	const changefontFamily = (option: OptionType) => {
		setfontFamily(option);
	};
	const changeFontSize = (option: OptionType) => {
		setfontSize(option);
	};
	const changeBackgroundColor = (option: OptionType) => {
		setBackgroundColor(option);
	};
	const changeFontColor = (option: OptionType) => {
		setFontColor(option);
	};
	const changeContentWidth = (option: OptionType) => {
		setContentWidth(option);
	};

	// Функция для обработки отправки формы
	const handleOnSubmitForm = (e: SyntheticEvent) => {
		e.preventDefault(); // Отменяет стандартное поведение формы
		onChange({
			fontFamilyOption: fontFamily,
			fontColor: fontColor,
			backgroundColor: backgroundColor,
			contentWidth: contentWidth,
			fontSizeOption: fontSize,
		}); // Отправка новых значений в родительский компонент
	};

	// Функция для сброса параметров к значениям по умолчанию
	const handleOnClickButtonReset = () => {
		onChange(defaultStateForm.current);

		setfontFamily(defaultStateForm.current.fontFamilyOption);
		setfontSize(defaultStateForm.current.fontSizeOption);
		setBackgroundColor(defaultStateForm.current.backgroundColor);
		setFontColor(defaultStateForm.current.fontColor);
		setContentWidth(defaultStateForm.current.contentWidth);
	};

	return (
		<div ref={asideRef}>
			<ArrowButton onClick={toggleStateMenu} isMenuOpen={isMenuOpen} /> {/* Кнопка для открытия/закрытия меню */}
			<aside
				className={clsx(styles.container, {
					[styles.container_open]: isMenuOpen, // Если меню открыто, применяем класс для отображения
				})}>
				<form className={styles.form} onSubmit={handleOnSubmitForm}> {/* Форма для изменения параметров статьи */}
					<Text as='h2' size={31} weight={800} uppercase>
						Задайте параметры {/* Заголовок формы */}
					</Text>
					<Spacing size={50} />
					<Select
						options={fontFamilyOptions} // Список доступных шрифтов
						selected={fontFamily} // Текущий выбранный шрифт
						onChange={changefontFamily} // Обработчик изменения шрифта
						title='шрифт' // Заголовок для поля
					/>
					<Spacing size={50} />
					<RadioGroup
						name='font-size'
						options={fontSizeOptions} // Список доступных размеров шрифта
						selected={fontSize} // Текущий выбранный размер
						onChange={changeFontSize} // Обработчик изменения размера шрифта
						title='размер шрифта' // Заголовок для поля
					/>
					<Spacing size={50} />
					<Select
						options={fontColors} // Список доступных цветов шрифта
						selected={fontColor} // Текущий выбранный цвет шрифта
						onChange={changeFontColor} // Обработчик изменения цвета шрифта
						title='цвет шрифта' // Заголовок для поля
					/>
					<Spacing size={50} />
					<Separator /> {/* Разделитель между секциями */}
					<Spacing size={50} />
					<Select
						options={backgroundColors} // Список доступных цветов фона
						selected={backgroundColor} // Текущий выбранный цвет фона
						onChange={changeBackgroundColor} // Обработчик изменения цвета фона
						title='цвет фона' // Заголовок для поля
					/>
					<Spacing size={50} />
					<Select
						options={contentWidthArr} // Список доступных ширин контента
						selected={contentWidth} // Текущая выбранная ширина
						onChange={changeContentWidth} // Обработчик изменения ширины контента
						title='ширина контента' // Заголовок для поля
					/>
					<Spacing size={207} />
					<div className={styles.bottomContainer}>
						<Button
							title='Сбросить' // Кнопка для сброса изменений
							type='reset'
							onClick={handleOnClickButtonReset} // Сброс значений на начальные
						/>
						<Button title='Применить' type='submit' /> {/* Кнопка для применения изменений */}
					</div>
				</form>
			</aside>
		</div>
	);
};

================
File: src/components/article-params-form/index.tsx
================
export { ArticleParamsForm } from './ArticleParamsForm';

================
File: src/components/article/Article.module.scss
================
.article {
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	row-gap: 24px;
	max-width: var(--container-width, auto);
	margin: 0 auto;
	padding: 72px 0 144px;
}

.titleDescription {
	max-width: 550px;
}

.image {
	width: 100%;
	height: auto;
	margin-top: 26px;
}

================
File: src/components/article/Article.tsx
================
// Сообщаем вебпаку, что этот файл использует это изображение.
import plane from 'src/images/plane.png'; // Импортируем изображение самолета, которое будет использоваться в компоненте
import { Text } from 'components/text'; // Импортируем компонент для текста, который будет использоваться для различных текстовых блоков

import styles from './Article.module.scss'; // Импортируем стили, которые относятся к данному компоненту

// Компонент для отображения статьи
export const Article = () => {
	return (
		<article className={styles.article}>
			<Text as='h1' size={45} weight={800} uppercase dynamicLite>
				Портрет Западной Швейцарии
			</Text>
			<div className={styles.titleDescription}>
				<Text size={22} weight={800} uppercase align='center' dynamicLite>
					Примитивист Фиштр расписывает новый бюджетный авиалайнер
				</Text>
			</div>
			<img className={styles.image} src={plane} alt='Картинка самолета' />
			<Text dynamic size={18} fontStyle='italic'>
				Фото: Hans-Peter Gauster , &quot;Bombardier CSeries CS300 HB-JCA&quot; ©
				2017 CC BY-SA 2.0
			</Text>
			<Text dynamic size={18}>
				В конце 2016 года швейцарская авиакомпания Swiss получила свой первый
				канадский «Бомбардье CS300» для полётов малой и средней дальности. Чтобы
				придать новой 145-местной машине неповторимую индивидуальность, ливрею
				заказали живописцу. При условии, что эскиз он выполнит в одиночку и
				лично поправит роспись, когда её будут наносить на фюзеляж.
			</Text>
			<Text dynamic size={18}>
				Выбор пал на примитивиста Матиаса Форбаша, работающего под псевдонимом
				Фиштр. Ему поставили задачу изобразить всё лучшее во франкоговорящей
				части Швейцарии — горы, озёра, вина, сыры, доброжелательность и свободу.
				Заказ был выполнен в рекордный срок, всего за 5 месяцев. Самолёт
				получился похожим на самого художника: такой же добродушный и с улыбкой
				до ушей.
			</Text>
			<Text dynamic size={18}>
				С мая 2017 года &quot;Бомбардье&quot; носит имя &quot;Швейцарская
				Романдия&quot; и регистрационный номер HB-JCA ; совершает в среднем 4
				коммерческих полёта в сутки. Его можно видеть в &quot;Домодедово&quot;,
				а также в аэропортах Парижа, Валенсии, Кракова, Берлина, Вены, Загреба,
				на на Майорке, Крите и Сицилии. Самолёт останется в той же ливрее, пока
				его купит другая авиакомпания.
			</Text>
		</article>
	);
};

================
File: src/components/article/index.tsx
================
export { Article } from './Article';

================
File: src/components/button/Button.module.scss
================
.button {
	display: flex;
	justify-content: center;
	align-items: center;
	box-sizing: border-box;
	width: 210px;
	height: 50px;
	text-align: center;
	border: 1px solid #000000;
	cursor: pointer;
}

.button:active {
	background: var(--gold, #ffc802);
}

.button:hover {
	background: var(--gold, #ffc802);
}

================
File: src/components/button/Button.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Button } from './Button';

const meta: Meta<typeof Button> = {
	component: Button,
};

export default meta;
type Story = StoryObj<typeof Button>;

export const ButtonStory: Story = {
	render: () => {
		return (
			<>
				<Button
					title='Сбросить'
					type='reset'
					onClick={() => alert('клик на кнопку сбросить')}
				/>
				<Button
					title='Применить'
					type='submit'
					onClick={() => alert('клик на кнопку применить')}
				/>
			</>
		);
	},
};

================
File: src/components/button/Button.tsx
================
import { Text } from 'components/text'; // Импорт компонента для отображения текста внутри кнопки

import styles from './Button.module.scss'; // Импорт стилей для компонента Button

// Определение типа пропсов для компонента Button
export const Button = ({
	title, // Название, которое будет отображаться на кнопке
	onClick, // Функция, которая будет вызвана при клике на кнопку
	type, // Тип кнопки (например, "submit", "reset")
}: {
	title: string; // Пропс для текста кнопки
	onClick?: () => void; // Необязательный пропс для обработчика клика
	type?: React.ButtonHTMLAttributes<HTMLButtonElement>['type']; // Необязательный пропс для типа кнопки
}) => {
	return (
		<button className={styles.button} type={type} onClick={onClick}> {/* Кнопка с классом для стилизации и обработчиком клика */}
			<Text weight={800} uppercase> {/* Текст внутри кнопки с жирным шрифтом и заглавными буквами */}
				{title} {/* Отображение текста кнопки */}
			</Text>
		</button>
	);
};

================
File: src/components/button/index.tsx
================
export { Button } from './Button';

================
File: src/components/hooks/useClose.ts
================
import { useEffect } from 'react'; // Импорт хука useEffect для выполнения побочных эффектов

type TUseClose = {
    isOpen: boolean; // Состояние, указывающее, открыто ли окно
    onClose: () => void; // Функция, вызываемая при закрытии
    rootRef: React.RefObject<HTMLElement>; // Ссылка на элемент, с которым мы проверяем клик вне его
};

// Кастомный хук для закрытия модального окна или другого элемента при клике вне его
// Хуки должны начинаться с "use", чтобы React их правильно распознал
export function useClose({ isOpen, onClose, rootRef }: TUseClose) {
    useEffect(() => {
        // Если окно закрыто (isOpen === false), прекращаем выполнение хука
        if (!isOpen) return;

        // Функция обработки клика вне элемента
        function handleClickOutside(event: MouseEvent) {
            const { target } = event;
            const isOutsideClick =
                target instanceof Node && // Проверяем, что target — это DOM-элемент
                rootRef.current &&
                !rootRef.current.contains(target); // Проверяем, что клик был вне текущего элемента
            if (isOutsideClick) {
                onClose(); // Если клик был вне элемента, вызываем onClose
            }
        }

        // Функция для обработки нажатия клавиши Escape
        const handleEscape = (e: KeyboardEvent) => {
            if (e.key === 'Escape') {
                onClose(); // Если нажата клавиша Escape, закрываем окно
            }
        };

        // Добавляем обработчики для кликов и нажатий клавиш
        document.addEventListener('keydown', handleEscape);
        document.addEventListener('mousedown', handleClickOutside);

        // Функция очистки при удалении компонента или изменении зависимостей
        return () => {
            document.removeEventListener('keydown', handleEscape); // Удаляем обработчик для Escape
            document.removeEventListener('mousedown', handleClickOutside); // Удаляем обработчик для кликов
        };
    // Следим за изменениями переменных isOpen, onClose и rootRef для того, чтобы хук срабатывал при изменении состояния
    }, [isOpen, onClose, rootRef]);
}

================
File: src/components/radio-group/hooks/useEnterSubmit.ts
================
import { useEffect, useRef } from 'react'; // Импортируем хук useEffect для выполнения побочных эффектов и useRef для создания ссылки на DOM-элемент
import { OptionType } from 'src/constants/articleProps'; // Импортируем тип OptionType для параметра option

// Тип для пропсов хука useEnterSubmit
type UseEnterSubmit = {
	onChange?: (option: OptionType) => void; // Необязательная функция, которая будет вызываться при нажатии Enter
	option: OptionType; // Параметр option, который будет передан в onChange при нажатии Enter
};

// Хук для обработки нажатия клавиши Enter
export const useEnterSubmit = ({ onChange, option }: UseEnterSubmit) => {
	// Создаем ссылку на DOM-элемент
	const optionRef = useRef<HTMLDivElement>(null);

	useEffect(() => {
		// Получаем текущий элемент, на который ссылается ref
		const optionHtml = optionRef.current;

		// Если элемент не существует, выходим из эффекта
		if (!optionHtml) return;

		// Функция, которая срабатывает при нажатии клавиши
		const handleEnterKeyDown = (event: KeyboardEvent) => {
			// Если фокус находится на элементе и нажата клавиша Enter, вызываем onChange
			if (document.activeElement === optionHtml && event.key === 'Enter') {
				onChange?.(option); // Вызов onChange с передачей option, если onChange существует
			}
		};

		// Добавляем обработчик события нажатия клавиши
		optionHtml.addEventListener('keydown', handleEnterKeyDown);

		// Очистка: удаляем обработчик события при размонтировании компонента
		return () => {
			optionHtml.removeEventListener('keydown', handleEnterKeyDown);
		};
	}, [onChange, option]); // Эффект зависит от onChange и option, чтобы реагировать на их изменения
};

================
File: src/components/radio-group/index.tsx
================
export { RadioGroup } from './RadioGroup';

================
File: src/components/radio-group/Option.tsx
================
import { useRef } from 'react'; // Импортируем хук useRef для создания ссылки на элемент
import { OptionType } from 'src/constants/articleProps'; // Импортируем тип OptionType, который используется для описания опций
import { Text } from 'components/text'; // Импортируем компонент Text для отображения текста
import { useEnterSubmit } from './hooks/useEnterSubmit'; // Импортируем хук useEnterSubmit, который будет обрабатывать нажатие клавиши Enter

import styles from './RadioGroup.module.scss'; // Импортируем стили для компонента

// Тип для пропсов компонента Option
type OptionProps = {
	value: OptionType['value']; // Значение опции (например, "large", "medium", "small")
	title: OptionType['title']; // Заголовок опции, который будет отображаться
	selected: OptionType; // Текущая выбранная опция
	groupName: string; // Имя группы, к которой принадлежит опция
	onChange?: (option: OptionType) => void; // Необязательная функция для изменения выбранной опции
	option: OptionType; // Опция, которую мы отображаем
};

// Компонент Option для отображения одной радио-кнопки
export const Option = (props: OptionProps) => {
	// Деструктуризация пропсов
	const { value, title, selected, groupName, onChange, option } = props;

	// Ссылка на элемент для отслеживания фокуса
	const optionRef = useRef<HTMLDivElement>(null);

	// Обработчик изменения выбранной опции
	const handleChange = () => onChange?.(option);

	// Хук для обработки нажатия клавиши Enter
	useEnterSubmit({ onChange, option });

	// Уникальный id для каждого элемента радио-кнопки
	const inputId = `${groupName}_radio_item_with_value__${value}`;
	// Проверка, является ли эта опция выбранной
	const isChecked = value === selected.title;

	return (
		// Контейнер для опции, с добавлением атрибутов для стилей и тестирования
		<div
			className={styles.item}
			key={value}
			data-checked={isChecked} // Устанавливаем атрибут, показывающий, выбрана ли опция
			data-testid={inputId} // Атрибут для тестирования
			tabIndex={0} // Сделать элемент фокусируемым
			ref={optionRef}>
			{/* Скрытый input для радио-кнопки */}
			<input
				className={styles.input} // Применяем стили для радио-кнопки
				type='radio' // Тип радио-кнопки
				name={groupName} // Группа радио-кнопок
				id={inputId} // Уникальный id для input
				value={value} // Значение опции
				onChange={handleChange} // Обработчик изменения состояния
				tabIndex={-1} // Убираем элемент из последовательности табуляции (чтобы только контейнер был фокусируемым)
			/>
			{/* Метка для отображения названия опции */}
			<label className={styles.label} htmlFor={inputId}>
				<Text size={18} uppercase>
					{title} {/* Название опции */}
				</Text>
			</label>
		</div>
	);
};

================
File: src/components/radio-group/RadioGroup.module.scss
================
.group {
	display: inline-flex;
	box-sizing: border-box;
	max-width: fit-content;
	border: 1px solid #000000;
}

.item {
	position: relative;
	display: block;
}

.input {
	position: absolute;
	width: 0;
	height: 0;
	margin: 0;
	padding: 0;
	opacity: 0;
}

.label {
	display: flex;
	flex-shrink: 0;
	justify-content: center;
	align-items: center;
	box-sizing: border-box;
	width: 124px;
	height: 35px;
	text-align: center;
	border-right: 1px solid #000000;
	cursor: pointer;
}

/* Убираем бордер у последнего в radiogroup, чтобы не было двойного бордера */

.item:last-child .label {
	border: none;
}

.label:hover,
.item[data-checked='true'] .label:hover {
	background: var(--gold, #ffc802);
}

.item[data-checked='true'] .label {
	background: var(--gold, #ffc802);
}

.container {
	display: flex;
	flex-direction: column;
	row-gap: 4px;
}

================
File: src/components/radio-group/RadioGroup.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { RadioGroup } from './RadioGroup';
import { useState } from 'react';

const meta: Meta<typeof RadioGroup> = {
	component: RadioGroup,
};

export default meta;
type Story = StoryObj<typeof RadioGroup>;

const RadioGroupWithState = () => {
	const options = [
		{ title: '1 опция', value: '1 опция', className: '' },
		{ title: '2 опция', value: '2 опция', className: '' },
		{ title: '3 опция', value: '3 опция', className: '' },
		{ title: '4 опция', value: '4 опция', className: '' },
	];
	const [selected, setSelected] = useState(options[0]);

	return (
		<>
			<RadioGroup
				selected={selected}
				name='radio'
				onChange={setSelected}
				options={options}
				title='Название радиогруппы'
			/>
		</>
	);
};

export const RadioGroupStory: Story = {
	render: () => <RadioGroupWithState />,
};

================
File: src/components/radio-group/RadioGroup.tsx
================
import { OptionType } from 'src/constants/articleProps'; // Импортируем тип OptionType, который определяет структуру опций
import { Text } from 'components/text'; // Импортируем компонент для отображения текста
import { Option } from './Option'; // Импортируем компонент Option, который отображает отдельную опцию

import styles from './RadioGroup.module.scss'; // Импортируем стили для компонента RadioGroup

// Тип для пропсов компонента RadioGroup
type RadioGroupProps = {
	name: string; // Имя группы радио-кнопок
	options: OptionType[]; // Массив опций, которые будут отображаться
	selected: OptionType; // Текущая выбранная опция
	onChange?: (value: OptionType) => void; // Функция, которая будет вызываться при изменении выбранной опции
	title: string; // Заголовок для группы радио-кнопок
};

// Компонент для отображения группы радио-кнопок
export const RadioGroup = (props: RadioGroupProps) => {
	// Деструктуризация пропсов
	const { name, options, selected, onChange, title } = props;

	// Обработчик изменения выбранной опции
	const handleChange = (option: OptionType) => onChange?.(option);

	return (
		<div className={styles.container}> {/* Контейнер для всей группы радио-кнопок */}
			{title && ( // Если передан заголовок, отображаем его
				<>
					<Text weight={800} size={12} uppercase>
						{title} {/* Заголовок группы опций */}
					</Text>
				</>
			)}
			<div className={styles.group}> {/* Контейнер для всех опций */}
				{/* Отображаем все опции, переданные через пропс options */}
				{options.map((option) => (
					<Option
						key={option.value} // Уникальный ключ для каждой опции
						groupName={name} // Имя группы, к которой принадлежит опция
						value={option.value} // Значение опции
						title={option.title} // Заголовок опции
						selected={selected} // Текущая выбранная опция
						onChange={() => handleChange(option)} // Обработчик изменения
						option={option} // Полные данные опции
					/>
				))}
			</div>
		</div>
	);
};

================
File: src/components/select/helpers/isFontFamilyClass.ts
================
import {
	FontFamiliesClasses,
	fontFamilyClasses,
} from 'src/constants/articleProps';

export function isFontFamilyClass(
	family?: string | FontFamiliesClasses
): family is FontFamiliesClasses {
	return fontFamilyClasses.includes(family as FontFamiliesClasses);
}

================
File: src/components/select/hooks/useEnterOptionSubmit.tsx
================
import { useEffect } from 'react'; // Импортируем хук useEffect для выполнения побочных эффектов
import { OptionType } from 'src/constants/articleProps'; // Импортируем тип OptionType для значений опций

// Тип для пропсов хука useEnterOptionSubmit
type UseEnterOptionSubmit = {
	onClick: (value: OptionType['value']) => void; // Функция, которая будет вызвана при нажатии Enter
	value: OptionType['value']; // Значение текущей опции
	optionRef: React.RefObject<HTMLLIElement>; // Ссылка на элемент списка, с которым отслеживаем нажатие
};

// Кастомный хук, который вызывает onClick, когда нажата клавиша Enter на указанном элементе списка
export const useEnterOptionSubmit = ({
	onClick, // Функция для обработки клика по опции
	value, // Значение опции, которое передается при вызове onClick
	optionRef, // Ссылка на элемент, с которым будет отслеживаться нажатие Enter
}: UseEnterOptionSubmit) => {
	// Хук выполняется при изменении зависимости
	useEffect(() => {
		const option = optionRef.current; // Получаем текущий элемент, на который ссылается ref
		if (!option) return; // Если элемент не найден, выходим из хука

		// Функция, которая срабатывает при нажатии клавиши
		const handleEnterKeyDown = (event: KeyboardEvent) => {
			// Проверяем, что фокус на данном элементе и нажата клавиша Enter
			if (document.activeElement === option && event.key === 'Enter') {
				onClick(value); // Если условие выполнено, вызываем onClick с переданным значением
			}
		};

		// Добавляем обработчик события для нажатия клавиши
		option.addEventListener('keydown', handleEnterKeyDown);

		// Функция очистки при удалении компонента или изменении зависимостей
		return () => {
			option.removeEventListener('keydown', handleEnterKeyDown); // Удаляем обработчик события
		};
	}, [value, onClick, optionRef]); // Эффект зависит от значения опции, функции onClick и ref элемента
};

================
File: src/components/select/hooks/useEnterSubmit.ts
================
import { useEffect } from 'react'; // Импортируем хук useEffect для выполнения побочных эффектов

// Тип для пропсов хука useEnterSubmit
type UseEnterSubmit = {
	onChange: React.Dispatch<React.SetStateAction<boolean>>; // Функция для обновления состояния (например, открытия/закрытия списка)
	placeholderRef: React.RefObject<HTMLDivElement>; // Ссылка на элемент, для которого отслеживаем нажатие клавиши Enter
};

// Кастомный хук для обработки нажатия клавиши Enter
export const useEnterSubmit = ({
	placeholderRef, // Ссылка на placeholder, на который будет добавлен обработчик
	onChange, // Функция, которая будет вызвана при нажатии Enter
}: UseEnterSubmit) => {
	// useEffect выполняется один раз при монтировании компонента, так как массив зависимостей пуст
	useEffect(() => {
		// Получаем текущий элемент, на который ссылается placeholderRef
		const placeholderEl = placeholderRef.current;
		if (!placeholderEl) return; // Если элемент не найден, прекращаем выполнение

		// Обработчик нажатия клавиши Enter
		const handleEnterKeyDown = (event: KeyboardEvent) => {
			if (event.key === 'Enter') {
				// Переключаем состояние на противоположное (например, открываем/закрываем список)
				onChange((isOpen: boolean) => !isOpen);
			}
		};

		// Добавляем обработчик нажатия клавиши
		placeholderEl.addEventListener('keydown', handleEnterKeyDown);

		// Очистка: удаляем обработчик при размонтировании компонента или изменении ссылки
		return () => {
			placeholderEl.removeEventListener('keydown', handleEnterKeyDown);
		};
	}, []); // Пустой массив зависимостей означает, что эффект сработает только один раз при монтировании компонента
};

================
File: src/components/select/hooks/useOutsideClickClose.ts
================
import { useEffect } from 'react'; // Импортируем хук useEffect для выполнения побочных эффектов

// Тип для пропсов хука useOutsideClickClose
type UseOutsideClickClose = {
	isOpen: boolean; // Состояние, показывающее, открыто ли окно/компонент
	onChange: (newValue: boolean) => void; // Функция для обновления состояния (например, для закрытия)
	onClose?: () => void; // Необязательная функция для обработки закрытия
	rootRef: React.RefObject<HTMLDivElement>; // Ссылка на корневой элемент, к которому нужно прикрепить обработчик
};

// Кастомный хук для закрытия компонента при клике вне его
export const useOutsideClickClose = ({
	isOpen, // Состояние, показывающее, открыто ли окно
	rootRef, // Ссылка на корневой элемент
	onClose, // Функция, вызываемая при закрытии
	onChange, // Функция для изменения состояния (например, закрытия)
}: UseOutsideClickClose) => {
	useEffect(() => {
		// Обработчик для кликов по окну
		const handleClick = (event: MouseEvent) => {
			const { target } = event; // Получаем элемент, по которому был произведен клик
			// Если клик был не внутри rootRef, то закрываем окно
			if (target instanceof Node && !rootRef.current?.contains(target)) {
				// Если окно открыто, вызываем onClose
				isOpen && onClose?.();
				// Обновляем состояние, чтобы закрыть окно
				onChange?.(false);
			}
		};

		// Добавляем обработчик на клик по окну
		window.addEventListener('click', handleClick);

		// Функция очистки, удаляет обработчик при размонтировании компонента
		return () => {
			window.removeEventListener('click', handleClick);
		};
	}, [onClose, onChange, isOpen]); // Эффект зависит от isOpen, onChange и onClose
};

================
File: src/components/select/index.tsx
================
export { Select } from './Select';

================
File: src/components/select/Option.tsx
================
import { useRef } from 'react'; // Импортируем хук useRef для создания ссылки на DOM-элемент
import type { MouseEventHandler } from 'react'; // Импортируем тип для обработчиков событий мыши
import clsx from 'clsx'; // Импортируем библиотеку clsx для динамического применения классов
import { OptionType } from 'src/constants/articleProps'; // Импортируем тип OptionType для опций
import { Text } from 'components/text'; // Импортируем компонент для отображения текста
import { isFontFamilyClass } from './helpers/isFontFamilyClass'; // Импортируем вспомогательную функцию для проверки класса шрифта
import { useEnterOptionSubmit } from './hooks/useEnterOptionSubmit'; // Импортируем кастомный хук для обработки нажатия клавиши Enter

import styles from './Select.module.scss'; // Импортируем стили для компонента Select

// Тип для пропсов компонента Option
type OptionProps = {
	option: OptionType; // Опция, содержащая значение, название и другие параметры
	onClick: (value: OptionType['value']) => void; // Функция, которая вызывается при клике на опцию
};

// Компонент для отображения отдельной опции в выпадающем списке
export const Option = (props: OptionProps) => {
	// Деструктурируем пропсы
	const {
		option: { value, title, optionClassName, className }, // Извлекаем данные опции
		onClick, // Функция для обработки клика
	} = props;

	// Ссылка на элемент списка для использования в хук `useEnterOptionSubmit`
	const optionRef = useRef<HTMLLIElement>(null);

	// Обработчик клика на опцию
	const handleClick =
		(clickedValue: OptionType['value']): MouseEventHandler<HTMLLIElement> =>
		() => {
			onClick(clickedValue); // Вызываем onClick с переданным значением опции
		};

	// Хук для обработки нажатия клавиши Enter на опции
	useEnterOptionSubmit({
		optionRef,
		value,
		onClick,
	});

	return (
		// Элемент списка для отображения опции
		<li
			className={clsx(styles.option, styles[optionClassName || ''])} // Применяем динамические классы
			value={value} // Устанавливаем значение для опции
			onClick={handleClick(value)} // Обработчик клика
			tabIndex={0} // Делаем элемент фокусируемым
			data-testid={`select-option-${value}`} // Атрибут для тестирования
			ref={optionRef}> {/* Ссылка на элемент */}
			<Text family={isFontFamilyClass(className) ? className : undefined}> {/* Применяем шрифт, если это валидный класс шрифта */}
				{title} {/* Название опции */}
			</Text>
		</li>
	);
};

================
File: src/components/select/Select.module.scss
================
.selectWrapper {
	position: relative;
}

.container {
	display: flex;
	flex-direction: column;
	row-gap: 4px;
}

.arrow {
	position: absolute;
	top: 50%;
	right: 6px;
	margin-top: -12px;
	transition: transform 0.2s ease-in-out, margin-top 0.2s ease-in-out;
}

.placeholder {
	display: flex;
	justify-content: flex-start;
	align-items: center;
	box-sizing: border-box;
	width: 100%;
	height: 50px;
	padding: 15px 17px;
	background: rgb(255 255 255);
	outline: 1px solid #000000;
	cursor: pointer;
}

.placeholder[data-selected='true'] {
	color: rgb(0 0 0);
}

.selectWrapper[data-is-active='true'] .arrow {
	margin-top: -14px;
	transform: rotate(180deg);
}

.selectWrapper[data-is-active='true'] .placeholder {
	outline: 3px solid #000000;
}

.selectWrapper:not([data-is-active='true'])
	.placeholder:not([data-status='invalid']):hover {
	outline: 3px solid #000000;
}

.select {
	position: absolute;
	z-index: 10;
	display: grid;
	box-sizing: border-box;
	width: 100%;
	margin: 0;
	padding: 0;
	list-style: none;
	background-color: rgb(255 255 255 / 100%);
	border-top: none;
	outline: 3px solid #000000;
}

.option {
	display: flex;
	justify-content: flex-start;
	align-items: center;
	height: 30px;
	padding: 5px;
	padding: 15px 17px;
	background-color: rgb(255 255 255 / 100%);
	border: 1px;
	cursor: pointer;
}

.option[aria-selected='true'] {
	background-color: rgb(0 0 0 / 5%);
}

.option:hover {
	background: var(--grey, #c4c4c4);
}

@mixin option-color-before {
	content: '';
	width: 35px;
	height: 35px;
	margin-right: 10px;
}

.option-black::before {
	@include option-color-before;
	background-color: #000000;
}

@mixin option-color-after {
	content: '';
	position: absolute;
	left: 26px;
	width: 17px;
	height: 17px;
	border-radius: 100%;
}

.option-black[data-selected='true']::after {
	@include option-color-after;
	background-color: #ffffff;
}

.option-white::before {
	@include option-color-before;
	box-sizing: border-box;
	background-color: #ffffff;
	border: 1px solid #000000;
}

.option-white[data-selected='true']::after {
	@include option-color-after;
	background-color: #000000;
}

.option-gray::before {
	@include option-color-before;
	background-color: #c4c4c4;
}

.option-gray[data-selected='true']::after {
	@include option-color-after;
	background-color: #ffffff;
}

.option-pink::before {
	@include option-color-before;
	background-color: #feafe8;
}

.option-pink[data-selected='true']::after {
	@include option-color-after;
	background-color: #ffffff;
}

.option-fuchsia::before {
	@include option-color-before;
	background-color: #fd24af;
}

.option-fuchsia[data-selected='true']::after {
	@include option-color-after;
	background-color: #ffffff;
}

.option-yellow::before {
	@include option-color-before;
	background-color: #ffc802;
}

.option-yellow[data-selected='true']::after {
	@include option-color-after;
	background-color: #ffffff;
}

.option-green::before {
	@include option-color-before;
	background-color: #80d994;
}

.option-green[data-selected='true']::after {
	@include option-color-after;
	background-color: #ffffff;
}

.option-blue::before {
	@include option-color-before;
	background-color: #6fc1fd;
}

.option-blue[data-selected='true']::after {
	@include option-color-after;
	background-color: #ffffff;
}

.option-purple::before {
	@include option-color-before;
	background-color: #5f0dee;
}

.option-purple[data-selected='true']::after {
	@include option-color-after;
	background-color: #ffffff;
}

@mixin option-width-before {
	content: '';
	width: 25px;
	height: 25px;
	margin-right: 10px;
}

.option-wide::before {
	@include option-width-before;
	background-image: url('./../../images/wide.svg');
}

.option-narrow::before {
	@include option-width-before;
	background-image: url('./../../images/narrow.svg');
}

================
File: src/components/select/Select.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Select } from './Select';
import { useState } from 'react';

const meta: Meta<typeof Select> = {
	component: Select,
};

export default meta;
type Story = StoryObj<typeof Select>;

const SelectWithState = () => {
	const options = [
		{ title: '1 опция', value: '1 опция', className: '' },
		{ title: '2 опция', value: '2 опция', className: '' },
		{ title: '3 опция', value: '3 опция', className: '' },
		{ title: '4 опция', value: '4 опция', className: '' },
	];
	const [selected, setSelected] = useState(options[0]);

	return (
		<>
			<Select
				selected={selected}
				onChange={setSelected}
				options={options}
				title='Название радиогруппы'
			/>
		</>
	);
};

export const SelectStory: Story = {
	render: () => <SelectWithState />,
};

================
File: src/components/select/Select.tsx
================
import { useState, useRef } from 'react'; // Импортируем хуки useState для состояния и useRef для создания ссылок на элементы
import type { MouseEventHandler } from 'react'; // Импортируем тип для обработчиков событий мыши
import clsx from 'clsx'; // Импортируем библиотеку clsx для динамического применения классов
import { OptionType } from 'src/constants/articleProps'; // Импортируем тип OptionType для опций
import { Text } from 'components/text'; // Импортируем компонент для отображения текста
import arrowDown from 'src/images/arrow-down.svg'; // Импортируем изображение стрелочки для выпадающего списка
import { Option } from './Option'; // Импортируем компонент Option для отображения каждой опции
import { isFontFamilyClass } from './helpers/isFontFamilyClass'; // Вспомогательная функция для проверки класса шрифта
import { useEnterSubmit } from './hooks/useEnterSubmit'; // Хук для обработки нажатия клавиши Enter
import { useOutsideClickClose } from './hooks/useOutsideClickClose'; // Хук для обработки кликов вне компонента

import styles from './Select.module.scss'; // Импортируем стили компонента Select

// Тип для пропсов компонента Select
type SelectProps = {
	selected: OptionType | null; // Текущая выбранная опция
	options: OptionType[]; // Список доступных опций
	placeholder?: string; // Текст по умолчанию, если ничего не выбрано
	onChange?: (selected: OptionType) => void; // Функция для обработки выбора опции
	onClose?: () => void; // Функция для обработки закрытия выпадающего списка
	title?: string; // Заголовок для списка
};

// Компонент для отображения выпадающего списка с опциями
export const Select = (props: SelectProps) => {
	// Деструктурируем пропсы
	const { options, placeholder, selected, onChange, onClose, title } = props;

	// Состояние для отслеживания открытия/закрытия списка
	const [isOpen, setIsOpen] = useState<boolean>(false);

	// Ссылки на элементы для использования в хуках
	const rootRef = useRef<HTMLDivElement>(null); // Ссылка на корневой элемент селектора
	const placeholderRef = useRef<HTMLDivElement>(null); // Ссылка на placeholder для отслеживания кликов и нажатий клавиши Enter

	// Хук для закрытия списка при клике вне элемента
	useOutsideClickClose({
		isOpen,
		rootRef,
		onClose,
		onChange: setIsOpen,
	});

	// Хук для обработки нажатия клавиши Enter на placeholder
	useEnterSubmit({
		placeholderRef,
		onChange: setIsOpen,
	});

	// Обработчик выбора опции
	const handleOptionClick = (option: OptionType) => {
		setIsOpen(false); // Закрытие списка после выбора
		onChange?.(option); // Вызываем onChange с выбранной опцией
	};

	// Обработчик клика по placeholder для открытия/закрытия списка
	const handlePlaceHolderClick: MouseEventHandler<HTMLDivElement> = () => {
		setIsOpen((isOpen) => !isOpen); // Переключаем состояние открытия/закрытия списка
	};

	return (
		<div className={styles.container}>
			{title && ( // Если есть заголовок, отображаем его
				<>
					<Text size={12} weight={800} uppercase>
						{title} {/* Заголовок списка */}
					</Text>
				</>
			)}
			<div
				className={styles.selectWrapper}
				ref={rootRef} // Привязываем ссылку на корневой элемент
				data-is-active={isOpen} // Атрибут для указания состояния (открыт/закрыт)
				data-testid='selectWrapper'>
				{/* Иконка стрелочки */}
				<img
					src={arrowDown} // Источник изображения стрелочки
					alt='иконка стрелочки' // Описание изображения
					className={clsx(styles.arrow, { [styles.arrow_open]: isOpen })} // Динамическое применение классов для стрелочки
				/>
				{/* Placeholder для отображения выбранной опции или текста по умолчанию */}
				<div
					className={clsx(
						styles.placeholder, // Базовый стиль для placeholder
						styles[selected?.optionClassName || ''] // Дополнительный класс, если опция выбрана
					)}
					data-status={status} // Атрибут для статуса (например, выбран/не выбран)
					data-selected={!!selected?.value} // Атрибут, указывающий на выбранную опцию
					onClick={handlePlaceHolderClick} // Обработчик клика по placeholder
					role='button' // Указываем, что это интерактивный элемент
					tabIndex={0} // Делаем placeholder фокусируемым
					ref={placeholderRef}> {/* Ссылка на placeholder для обработки клавиши Enter */}
					<Text
						family={isFontFamilyClass(selected?.className)
							? selected?.className
							: undefined}> {/* Применение шрифта, если это валидный класс шрифта */}
						{selected?.title || placeholder} {/* Отображение выбранной опции или текста по умолчанию */}
					</Text>
				</div>
				{/* Если список открыт, отображаем опции */}
				{isOpen && (
					<ul className={styles.select} data-testid='selectDropdown'>
						{options
							.filter((option) => selected?.value !== option.value) // Исключаем уже выбранную опцию из списка
							.map((option) => (
								<Option
									key={option.value} // Уникальный ключ для каждой опции
									option={option} // Передаем данные опции в компонент Option
									onClick={() => handleOptionClick(option)} // Обработчик для выбора опции
								/>
							))}
					</ul>
				)}
			</div>
		</div>
	);
};

================
File: src/components/separator/index.module.scss
================
.separator {
	width: 100%;
	height: 1px;
	background: #d7d7d7;
}

================
File: src/components/separator/index.tsx
================
export { Separator } from './Separator';

================
File: src/components/separator/Separator.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Separator } from './Separator';

const meta: Meta<typeof Separator> = {
	component: Separator,
};

export default meta;
type Story = StoryObj<typeof Separator>;

export const SelectStory: Story = {
	render: () => {
		return <Separator />;
	},
};

================
File: src/components/separator/Separator.tsx
================
import styles from './index.module.scss';

export const Separator = () => {
	return <div className={styles.separator}></div>;
};

================
File: src/components/spacing/index.module.scss
================
.size4 {
	block-size: 4px;
}

.size24 {
	block-size: 24px;
}

.size50 {
	block-size: 50px;
}

.size90 {
	block-size: 90px;
}

.size207 {
	block-size: 207px;
}

================
File: src/components/spacing/index.tsx
================
export { Spacing } from './Spacing';

================
File: src/components/spacing/Spacing.tsx
================
import { ElementType } from 'react';
import { clsx } from 'clsx';

import styles from './index.module.scss';

type SpacingProps = {
	/** Тэг которым отрендерить отступ */
	as?: ElementType;
	/** Размер отступа */
	size?: 4 | 24 | 50 | 90 | 207;
};

export const Spacing = ({ as: Tag = 'div', size = 4 }: SpacingProps) => {
	const className = clsx(styles[`size${size}`]);
	return <Tag className={className}></Tag>;
};

================
File: src/components/story-decorator/index.tsx
================
export { StoryDecorator } from './StoryDecorator';

================
File: src/components/story-decorator/StoryDecorator.module.scss
================
@import '../../styles/index';

.storybookContainer {
	display: flex;
	justify-content: center;
	align-items: center;
	padding: 50px;
}

================
File: src/components/story-decorator/StoryDecorator.tsx
================
import { Decorator } from '@storybook/react';
import styles from './StoryDecorator.module.scss';

export const StoryDecorator: Decorator = (Story) => (
	<div className={styles.storybookContainer}>
		<Story />
	</div>
);

================
File: src/components/text/index.module.scss
================
@mixin typography($size: 18, $weight: 400, $family: 'Open Sans') {
	color: #000000;
	font-weight: $weight;
	font-size: $size;
	font-family: $family;
	line-height: normal;
	letter-spacing: 0;
}

.text {
	@include typography(18, 400, 'Open Sans');
}

.open-sans {
	font-family: 'Open Sans', sans-serif;
}

.ubuntu {
	font-family: 'Ubuntu', sans-serif;
}

.cormorant-garamond {
	font-family: 'Cormorant Garamond', sans-serif;
}

.days-one {
	font-family: 'Days One', sans-serif;
}

.merriweather {
	font-family: 'Merriweather', sans-serif;
}

.left {
	text-align: left;
}

.center {
	text-align: center;
}

.uppercase {
	text-transform: uppercase;
}

.size12 {
	font-size: 12px;
}

.size18 {
	font-size: 18px;
}

.size22 {
	font-size: 22px;
}

.size25 {
	font-size: 25px;
}

.size31 {
	font-size: 31px;
}

.size45 {
	font-size: 45px;
}

.weight400 {
	font-weight: 400;
}

.weight800 {
	font-weight: 800;
}

.normal {
	font-style: normal;
}

.italic {
	font-style: italic;
}

// для динамических типографий, используем константы, которые будут меняться

.dynamic {
	color: var(--font-color, #000000);
	font-size: var(--font-size, 18px);
	font-family: var(--font-family, 'Open Sans');
}

// для заголовка и подзаголовка рамер шрифта одинаковый, меняется только цвет и семейство шрифтов

.dynamicLite {
	color: var(--font-color, #000000);
	font-family: var(--font-family, 'Open Sans');
}

================
File: src/components/text/index.tsx
================
export { Text } from './Text';

================
File: src/components/text/Text.stories.tsx
================
import type { Meta, StoryObj } from '@storybook/react';

import { Text } from './Text';

const meta: Meta<typeof Text> = {
	component: Text,
};

export default meta;
type Story = StoryObj<typeof Text>;

export const SelectStory: Story = {
	argTypes: {
		as: {
			options: ['h1', 'h2', 'div', 'span'],
			control: { type: 'select' },
		},
		dynamic: {
			control: { type: 'boolean' },
		},
		size: {
			options: [12, 18, 22, 25, 31, 45],
			control: { type: 'select' },
		},
		weight: {
			options: [400, 800],
			control: { type: 'select' },
		},
		fontStyle: {
			options: ['italic', 'normal'],
			control: { type: 'select' },
		},
		uppercase: {
			control: { type: 'boolean' },
		},
		align: {
			options: ['center', 'left'],
			control: { type: 'select' },
		},
		family: {
			options: [
				'open-sans',
				'ubuntu',
				'cormorant-garamond',
				'days-one',
				'merriweather',
			],
			control: { type: 'select' },
		},
	},
	render: (args) => {
		return (
			<Text {...args}>
				Lorem ipsum, dolor sit amet consectetur adipisicing elit. Animi, nulla.
				Itaque laudantium quas repudiandae delectus voluptates fuga veritatis.
				Necessitatibus omnis sequi repudiandae, porro est possimus ullam
				inventore dolores rem molestiae.
			</Text>
		);
	},
};

================
File: src/components/text/Text.tsx
================
import { ElementType, ReactNode } from 'react';
import { clsx } from 'clsx';
import { FontFamiliesClasses } from 'src/constants/articleProps';

import styles from './index.module.scss';

type TextProps = {
	/** Сам текст для вывода */
	children: ReactNode;
	/** Тэг которым отрендерить текст */
	as?: ElementType;
	/** Булевая пропса, должен ли текст меняться в зависимости от конфига */
	dynamic?: boolean;
	/** Размер шрифта */
	size?: 12 | 18 | 22 | 25 | 31 | 45;
	/** Вес шрифта */
	weight?: 400 | 800;
	/** Стиль шрифта */
	fontStyle?: 'italic' | 'normal';
	/** Булевая пропса, отвечающая должен ли текст быть в верхнем регистре */
	uppercase?: boolean;
	/** Выравнивание текста */
	align?: 'center' | 'left';
	/** font-family текста */
	family?: FontFamiliesClasses;
	/** Булевая пропса, делает динамическим только семью шрифтов и цвет */
	dynamicLite?: boolean;
};

export const Text = ({
	children,
	as: Tag = 'div',
	size = 18,
	dynamic = false,
	weight = 400,
	fontStyle = 'normal',
	uppercase = false,
	align = 'left',
	family = 'open-sans',
	dynamicLite = false,
}: TextProps) => {
	const className = clsx(
		styles.text,
		styles[`size${size}`],
		{ [styles.dynamic]: dynamic },
		styles[`weight${weight}`],
		styles[`${fontStyle}`],
		{ [styles.uppercase]: uppercase },
		styles[`${align}`],
		styles[`${family}`],
		{ [styles.dynamicLite]: dynamicLite }
	);
	return <Tag className={className}>{children}</Tag>;
};

================
File: src/constants/articleProps.ts
================
export const fontFamilyClasses = [
	'open-sans',
	'ubuntu',
	'cormorant-garamond',
	'days-one',
	'merriweather',
] as const;

export type FontFamiliesClasses = (typeof fontFamilyClasses)[number];

export type OptionType = {
	title: string;
	value: string;
	className: string;
	optionClassName?: string;
};

export const fontFamilyOptions: OptionType[] & {
	optionClassName?: FontFamiliesClasses;
} = [
	{ title: 'Open Sans', value: 'Open Sans', className: fontFamilyClasses[0] },
	{ title: 'Ubuntu', value: 'Ubuntu', className: fontFamilyClasses[1] },
	{
		title: 'Cormorant Garamond',
		value: 'Cormorant Garamond',
		className: fontFamilyClasses[2],
	},
	{ title: 'Days One', value: 'Days One', className: fontFamilyClasses[3] },
	{
		title: 'Merriweather',
		value: 'Merriweather',
		className: fontFamilyClasses[4],
	},
];

export const fontColors: OptionType[] = [
	{
		title: 'Черный',
		value: '#000000',
		className: 'font-black',
		optionClassName: 'option-black',
	},
	{
		title: 'Белый',
		value: '#FFFFFF',
		className: 'font-white',
		optionClassName: 'option-white',
	},
	{
		title: 'Серый',
		value: '#C4C4C4',
		className: 'font-gray',
		optionClassName: 'option-gray',
	},
	{
		title: 'Розовый',
		value: '#FEAFE8',
		className: 'font-pink',
		optionClassName: 'option-pink',
	},
	{
		title: 'Ярко-розовый',
		value: '#FD24AF',
		className: 'font-fuchsia',
		optionClassName: 'option-fuchsia',
	},
	{
		title: 'Жёлтый',
		value: '#FFC802',
		className: 'font-yellow',
		optionClassName: 'option-yellow',
	},
	{
		title: 'Зелёный',
		value: '#80D994',
		className: 'font-green',
		optionClassName: 'option-green',
	},
	{
		title: 'Голубой',
		value: '#6FC1FD',
		className: 'font-blue',
		optionClassName: 'option-blue',
	},
	{
		title: 'Фиолетовый',
		value: '#5F0DEE',
		className: 'font-purple',
		optionClassName: 'option-purple',
	},
];

export const backgroundColors: OptionType[] = [
	{
		title: 'Белый',
		value: '#FFFFFF',
		className: 'bg-white',
		optionClassName: 'option-white',
	},
	{
		title: 'Черный',
		value: '#000000',
		className: 'bg-black',
		optionClassName: 'option-black',
	},
	{
		title: 'Серый',
		value: '#C4C4C4',
		className: 'bg-gray',
		optionClassName: 'option-gray',
	},
	{
		title: 'Розовый',
		value: '#FEAFE8',
		className: 'bg-pink',
		optionClassName: 'option-pink',
	},
	{
		title: 'Ярко-розовый',
		value: '#FD24AF',
		className: 'bg-fuchsia',
		optionClassName: 'option-fuchsia',
	},
	{
		title: 'Жёлтый',
		value: '#FFC802',
		className: 'bg-yellow',
		optionClassName: 'option-yellow',
	},
	{
		title: 'Зелёный',
		value: '#80D994',
		className: 'bg-green',
		optionClassName: 'option-green',
	},
	{
		title: 'Голубой',
		value: '#6FC1FD',
		className: 'bg-blue',
		optionClassName: 'option-blue',
	},
	{
		title: 'Фиолетовый',
		value: '#5F0DEE',
		className: 'bg-purple',
		optionClassName: 'option-purple',
	},
];

export const contentWidthArr: OptionType[] = [
	{
		title: 'Широкий',
		value: '1394px',
		className: 'width-wide',
		optionClassName: 'option-wide',
	},
	{
		title: 'Узкий',
		value: '948px',
		className: 'width-narrow',
		optionClassName: 'option-narrow',
	},
];

export const fontSizeOptions: OptionType[] = [
	{ title: '18px', value: '18px', className: 'font-size-18' },
	{ title: '25px', value: '25px', className: 'font-size-25' },
	{ title: '38px', value: '38px', className: 'font-size-38' },
];

export const defaultArticleState = {
	fontFamilyOption: fontFamilyOptions[0],
	fontColor: fontColors[0],
	backgroundColor: backgroundColors[0],
	contentWidth: contentWidthArr[0],
	fontSizeOption: fontSizeOptions[0],
};

export type ArticleStateType = typeof defaultArticleState;

================
File: src/custom.d.ts
================
declare module '*.svg' {
	import React = require('react');
	export const ReactComponent: React.FunctionComponent<
		React.SVGProps<SVGSVGElement>
	>;
	const src: string;
	export default src;
}

declare module '*.png';

declare module '*.jpg';

declare module '*.json';

declare module '*.module.css';

declare module '*.module.scss';

declare module '*.module.sass';

================
File: src/fonts/font-files/Cormorant_Garamond/OFL.txt
================
Copyright 2015 the Cormorant Project Authors (github.com/CatharsisFonts/Cormorant)

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL


-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

================
File: src/fonts/font-files/Days_One/OFL.txt
================
Copyright (c) 2011, Jovanny Lemonad (http://www.jovanny.ru)
with Reserved Font Name "Days One"

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL


-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

================
File: src/fonts/font-files/Merriweather/OFL.txt
================
Copyright 2016 The Merriweather Project Authors (https://github.com/EbenSorkin/Merriweather), with Reserved Font Name "Merriweather".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL


-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

================
File: src/fonts/font-files/Open_Sans/OFL.txt
================
Copyright 2020 The Open Sans Project Authors (https://github.com/googlefonts/opensans)

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL


-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

================
File: src/fonts/font-files/Open_Sans/README.txt
================
Open Sans Variable Font
=======================

This download contains Open Sans as both variable fonts and static fonts.

Open Sans is a variable font with these axes:
  wdth
  wght

This means all the styles are contained in these files:
  Open_Sans/OpenSans-VariableFont_wdth,wght.ttf
  Open_Sans/OpenSans-Italic-VariableFont_wdth,wght.ttf

If your app fully supports variable fonts, you can now pick intermediate styles
that aren’t available as static fonts. Not all apps support variable fonts, and
in those cases you can use the static font files for Open Sans:
  Open_Sans/static/OpenSans_Condensed-Light.ttf
  Open_Sans/static/OpenSans_Condensed-Regular.ttf
  Open_Sans/static/OpenSans_Condensed-Medium.ttf
  Open_Sans/static/OpenSans_Condensed-SemiBold.ttf
  Open_Sans/static/OpenSans_Condensed-Bold.ttf
  Open_Sans/static/OpenSans_Condensed-ExtraBold.ttf
  Open_Sans/static/OpenSans_SemiCondensed-Light.ttf
  Open_Sans/static/OpenSans_SemiCondensed-Regular.ttf
  Open_Sans/static/OpenSans_SemiCondensed-Medium.ttf
  Open_Sans/static/OpenSans_SemiCondensed-SemiBold.ttf
  Open_Sans/static/OpenSans_SemiCondensed-Bold.ttf
  Open_Sans/static/OpenSans_SemiCondensed-ExtraBold.ttf
  Open_Sans/static/OpenSans-Light.ttf
  Open_Sans/static/OpenSans-Regular.ttf
  Open_Sans/static/OpenSans-Medium.ttf
  Open_Sans/static/OpenSans-SemiBold.ttf
  Open_Sans/static/OpenSans-Bold.ttf
  Open_Sans/static/OpenSans-ExtraBold.ttf
  Open_Sans/static/OpenSans_Condensed-LightItalic.ttf
  Open_Sans/static/OpenSans_Condensed-Italic.ttf
  Open_Sans/static/OpenSans_Condensed-MediumItalic.ttf
  Open_Sans/static/OpenSans_Condensed-SemiBoldItalic.ttf
  Open_Sans/static/OpenSans_Condensed-BoldItalic.ttf
  Open_Sans/static/OpenSans_Condensed-ExtraBoldItalic.ttf
  Open_Sans/static/OpenSans_SemiCondensed-LightItalic.ttf
  Open_Sans/static/OpenSans_SemiCondensed-Italic.ttf
  Open_Sans/static/OpenSans_SemiCondensed-MediumItalic.ttf
  Open_Sans/static/OpenSans_SemiCondensed-SemiBoldItalic.ttf
  Open_Sans/static/OpenSans_SemiCondensed-BoldItalic.ttf
  Open_Sans/static/OpenSans_SemiCondensed-ExtraBoldItalic.ttf
  Open_Sans/static/OpenSans-LightItalic.ttf
  Open_Sans/static/OpenSans-Italic.ttf
  Open_Sans/static/OpenSans-MediumItalic.ttf
  Open_Sans/static/OpenSans-SemiBoldItalic.ttf
  Open_Sans/static/OpenSans-BoldItalic.ttf
  Open_Sans/static/OpenSans-ExtraBoldItalic.ttf

Get started
-----------

1. Install the font files you want to use

2. Use your app's font picker to view the font family and all the
available styles

Learn more about variable fonts
-------------------------------

  https://developers.google.com/web/fundamentals/design-and-ux/typography/variable-fonts
  https://variablefonts.typenetwork.com
  https://medium.com/variable-fonts

In desktop apps

  https://theblog.adobe.com/can-variable-fonts-illustrator-cc
  https://helpx.adobe.com/nz/photoshop/using/fonts.html#variable_fonts

Online

  https://developers.google.com/fonts/docs/getting_started
  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide
  https://developer.microsoft.com/en-us/microsoft-edge/testdrive/demos/variable-fonts

Installing fonts

  MacOS: https://support.apple.com/en-us/HT201749
  Linux: https://www.google.com/search?q=how+to+install+a+font+on+gnu%2Blinux
  Windows: https://support.microsoft.com/en-us/help/314960/how-to-install-or-remove-a-font-in-windows

Android Apps

  https://developers.google.com/fonts/docs/android
  https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts

License
-------
Please read the full license text (OFL.txt) to understand the permissions,
restrictions and requirements for usage, redistribution, and modification.

You can use them in your products & projects – print or digital,
commercial or otherwise.

This isn't legal advice, please consider consulting a lawyer and see the full
license for all details.

================
File: src/fonts/font-files/Ubuntu/UFL.txt
================
-------------------------------
UBUNTU FONT LICENCE Version 1.0
-------------------------------

PREAMBLE
This licence allows the licensed fonts to be used, studied, modified and
redistributed freely. The fonts, including any derivative works, can be
bundled, embedded, and redistributed provided the terms of this licence
are met. The fonts and derivatives, however, cannot be released under
any other licence. The requirement for fonts to remain under this
licence does not require any document created using the fonts or their
derivatives to be published under this licence, as long as the primary
purpose of the document is not to be a vehicle for the distribution of
the fonts.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this licence and clearly marked as such. This may
include source files, build scripts and documentation.

"Original Version" refers to the collection of Font Software components
as received under this licence.

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to
a new environment.

"Copyright Holder(s)" refers to all individuals and companies who have a
copyright ownership of the Font Software.

"Substantially Changed" refers to Modified Versions which can be easily
identified as dissimilar to the Font Software by users of the Font
Software comparing the Original Version with the Modified Version.

To "Propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy. Propagation includes copying,
distribution (with or without modification and with or without charging
a redistribution fee), making available to the public, and in some
countries other activities as well.

PERMISSION & CONDITIONS
This licence does not grant any rights under trademark law and all such
rights are reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of the Font Software, to propagate the Font Software, subject to
the below conditions:

1) Each copy of the Font Software must contain the above copyright
notice and this licence. These can be included either as stand-alone
text files, human-readable headers or in the appropriate machine-
readable metadata fields within text or binary files as long as those
fields can be easily viewed by the user.

2) The font name complies with the following:
(a) The Original Version must retain its name, unmodified.
(b) Modified Versions which are Substantially Changed must be renamed to
avoid use of the name of the Original Version or similar names entirely.
(c) Modified Versions which are not Substantially Changed must be
renamed to both (i) retain the name of the Original Version and (ii) add
additional naming elements to distinguish the Modified Version from the
Original Version. The name of such Modified Versions must be the name of
the Original Version, with "derivative X" where X represents the name of
the new work, appended to that name.

3) The name(s) of the Copyright Holder(s) and any contributor to the
Font Software shall not be used to promote, endorse or advertise any
Modified Version, except (i) as required by this licence, (ii) to
acknowledge the contribution(s) of the Copyright Holder(s) or (iii) with
their explicit written permission.

4) The Font Software, modified or unmodified, in part or in whole, must
be distributed entirely under this licence, and must not be distributed
under any other licence. The requirement for fonts to remain under this
licence does not affect any document created using the Font Software,
except any version of the Font Software extracted from a document
created using the Font Software may only be distributed under this
licence.

TERMINATION
This licence becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF
COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER
DEALINGS IN THE FONT SOFTWARE.

================
File: src/fonts/font.scss
================
@font-face {
	font-family: 'Open sans';
	src: url('~fonts/font-files/Open_Sans/OpenSans-VariableFont_wdth\,wght.ttf')
		format('truetype');
	font-weight: 400 800;
}

@font-face {
	font-family: 'Open sans';
	src: url('~fonts/font-files/Open_Sans/OpenSans-Italic-VariableFont_wdth\,wght.ttf')
		format('truetype');
	font-weight: 400;
	font-style: italic;
}

@font-face {
	font-family: 'Cormorant Garamond';
	src: url('~fonts/font-files/Cormorant_Garamond/CormorantGaramond-Regular.ttf')
		format('truetype');
	font-weight: 400;
}

@font-face {
	font-family: 'Cormorant Garamond';
	src: url('~fonts/font-files/Cormorant_Garamond/CormorantGaramond-Bold.ttf')
		format('truetype');
	font-weight: 800;
}

@font-face {
	font-family: 'Days One';
	src: url('~fonts/font-files/Days_One/DaysOne-Regular.ttf') format('truetype');
	font-weight: 400 800;
}

@font-face {
	font-family: 'Merriweather';
	src: url('~fonts/font-files/Merriweather/Merriweather-Regular.ttf')
		format('truetype');
	font-weight: 400;
}

@font-face {
	font-family: 'Merriweather';
	src: url('~fonts/font-files/Merriweather/Merriweather-Bold.ttf')
		format('truetype');
	font-weight: 800;
}

================
File: src/images/arrow-down.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
<path d="M6 9L12 15L18 9" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

================
File: src/images/arrow.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none">
  <path d="M24 38L10 24L24 10" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M38 24H10" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

================
File: src/images/narrow.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 25 25" fill="none">
  <path d="M2.0835 12.5H8.3335" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M22.9165 12.5H16.6665" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M12.5 2.08337V4.16671" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M12.5 8.33337V10.4167" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M12.5 14.5834V16.6667" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M12.5 20.8334V22.9167" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M19.7915 9.375L16.6665 12.5L19.7915 15.625" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M5.2085 15.625L8.3335 12.5L5.2085 9.375" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

================
File: src/images/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/images/typescript.svg
================
<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><title>file_type_typescript</title><path d="M23.827,8.243A4.424,4.424,0,0,1,26.05,9.524a5.853,5.853,0,0,1,.852,1.143c.011.045-1.534,1.083-2.471,1.662-.034.023-.169-.124-.322-.35a2.014,2.014,0,0,0-1.67-1c-1.077-.074-1.771.49-1.766,1.433a1.3,1.3,0,0,0,.153.666c.237.49.677.784,2.059,1.383,2.544,1.095,3.636,1.817,4.31,2.843a5.158,5.158,0,0,1,.416,4.333,4.764,4.764,0,0,1-3.932,2.815,10.9,10.9,0,0,1-2.708-.028,6.531,6.531,0,0,1-3.616-1.884,6.278,6.278,0,0,1-.926-1.371,2.655,2.655,0,0,1,.327-.208c.158-.09.756-.434,1.32-.761L19.1,19.6l.214.312a4.771,4.771,0,0,0,1.35,1.292,3.3,3.3,0,0,0,3.458-.175,1.545,1.545,0,0,0,.2-1.974c-.276-.395-.84-.727-2.443-1.422a8.8,8.8,0,0,1-3.349-2.055,4.687,4.687,0,0,1-.976-1.777,7.116,7.116,0,0,1-.062-2.268,4.332,4.332,0,0,1,3.644-3.374A9,9,0,0,1,23.827,8.243ZM15.484,9.726l.011,1.454h-4.63V24.328H7.6V11.183H2.97V9.755A13.986,13.986,0,0,1,3.01,8.289c.017-.023,2.832-.034,6.245-.028l6.211.017Z" style="fill:#007acc"/></svg>

================
File: src/images/wide.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 25 25" fill="none">
  <path d="M16.6665 12.5H22.9165" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M8.3335 12.5H2.0835" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M12.5 2.08337V4.16671" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M12.5 8.33337V10.4167" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M12.5 14.5834V16.6667" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M12.5 20.8334V22.9167" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M19.7915 15.625L22.9165 12.5L19.7915 9.375" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M5.2085 9.375L2.0835 12.5L5.2085 15.625" stroke="black" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

================
File: src/index.tsx
================
import { createRoot } from 'react-dom/client';
import { StrictMode } from 'react';
import { App } from './components/app/App';
import './styles/index.scss';

const domNode = document.getElementById('root') as HTMLDivElement;
const root = createRoot(domNode);

root.render(
	<StrictMode>
		<App />
	</StrictMode>
);

================
File: src/styles/index.scss
================
/* Подключаем стили со шрифтами, так как они нужны на всех страницах */

@import '~fonts/font';

/* Отключаем браузерные дефолтные стили для всех элементов */

html,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
	margin: 0;
	padding: 0;
	font: inherit;
	font-size: 100%;
	vertical-align: baseline;
	border: 0;
}

/* HTML5 display-role reset for older browsers */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
	display: block;
}

body {
	margin: 0;
	padding: 0;
	font: inherit;
	font-size: 100%;
	line-height: 1;
	vertical-align: baseline;
	border: 0;
}

ol,
ul {
	list-style: none;
}

blockquote,
q {
	quotes: none;
}

blockquote::before,
blockquote::after,
q::before,
q::after {
	content: '';
	content: none;
}

table {
	border-collapse: collapse;
	border-spacing: 0;
}

================
File: tsconfig.json
================
{
	"compilerOptions": {
		"target": "ES5" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,
		"module": "ESNext" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
		"moduleResolution": "node" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */ /* Type declaration files to be included in compilation. */,
		"lib": [
			"DOM",
			"DOM.Iterable",
			"ESNext"
		] /* Specify library files to be included in the compilation. */,
		"jsx": "react-jsx" /* Specify JSX code generation: 'preserve', 'react-native', 'react' or 'react-jsx'. */,
		"isolatedModules": true /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */,
		"esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
		"strict": true /* Enable all strict type-checking options. */,
		"skipLibCheck": true /* Skip type checking of declaration files. */,
		"forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */,
		"resolveJsonModule": true,
		"sourceMap": true,
		"allowJs": true /* Allow javascript files to be compiled. Useful when migrating JS to TS */,
		// "checkJs": true /* Report errors in .js files. Works in tandem with allowJs. */,
		"plugins": [{ "name": "typescript-plugin-css-modules" }],
		"baseUrl": "./",
		// Важно держать конфиг элиасов тут в соответствии с конфигом элиасов в вебпаке (webpack.common.js - resolve.alias) и с конфигом сторибука (.storybook/main.ts - webpackFinal)
		"paths": {
			"src/*": ["src/*"],
			"fonts/*": ["src/fonts/*"],
			"components/*": ["src/components/*"]
		}
	},
	"outDir": "./dist/",
	"include": ["src/**/*"]
}

================
File: webpack/webpack.common.js
================
const HTMLWebpackPlugins = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const path = require('path'); //для того чтобы превратить отнсительный путь в абсолютный мы будем использовать пакет path
const webpack = require('webpack');

const production = process.env.NODE_ENV === 'production';

module.exports = {
	entry: path.resolve(__dirname, '..', './src/index.tsx'), //точка входа в наше приложение содержит абсолютный путь к index.ts
	output: {
		path: path.resolve(__dirname, '..', './dist'), //путь куда будет собираться наш проект
		filename: production
			? 'static/scripts/[name].[contenthash].js'
			: 'static/scripts/[name].js', // имя нашего бандла
		publicPath: '/',
	},
	//Нужно помочь вебпаку научится работать с jsx и tsx файлами для этого используют ts loader
	module: {
		rules: [
			{
				test: /\.[tj]sx?$/, //содержит регулярное выражение, которое содержит информацию какие файлы должны обрабатываться этим loader'ом
				use: [
					{
						loader: 'ts-loader',
					},
				], // для того чтобы ts-loader корректно отработал нам нужен tsconfig его можно создать вручную, а можно создать автоматически
				/** чтобы проиницилизовать его автоматически можно установить пакет typesctipt глобально или использовать npx выполнив команду npx tsc --init
				После создания конфига нужно включить "allowJs": true, чтобы работать не только c typescript, также меняем "jsx": "react" чтобы мы могли работать с react компонентами и включаем карту ресурсов "sourceMap": true, пока на этом все вернемся в этот конфиг позже*/
				exclude: /node_modules/,
			},
			{
				test: /\.(png|jpg|gif|webp)$/,
				type: 'asset/resource',
				generator: {
					filename: 'static/images/[hash][ext][query]',
				},
			},
			{
				test: /\.(woff(2)?|eot|ttf|otf)$/,
				type: 'asset/resource',
				generator: {
					filename: 'static/fonts/[hash][ext][query]',
				},
			},
			{
				test: /\.svg$/i,
				issuer: /\.[jt]sx?$/,
				use: ['@svgr/webpack', 'url-loader'],
			},
			{
				test: /\.(sa|sc|c)ss$/,
				use: [
					production ? MiniCssExtractPlugin.loader : 'style-loader',
					{
						loader: 'css-loader',
						options: {
							modules: {
								mode: 'local',
								localIdentName: '[name]__[local]__[hash:base64:5]',
								auto: /\.module\.\w+$/i,
							},
							importLoaders: 2, //Значение 2 говорит о том, что некоторые трансформации PostCSS нужно применить до css-loader.
						},
					},
					'postcss-loader',
					{
						loader: 'sass-loader',
						options: {
							sourceMap: true,
						},
					},
				],
			},
		],
	},
	resolve: {
		extensions: ['.js', '.jsx', '.tsx', '.ts', '.json'], //указываем файлы с которыми будет работать webpack
		alias: {
			fonts: path.resolve(__dirname, '..', './src/fonts'),
			src: path.resolve(__dirname, '..', './src'),
			components: path.resolve(__dirname, '..', './src/components'),
		},
	},
	plugins: [
		new HTMLWebpackPlugins({
			template: path.resolve(__dirname, '..', './public/index.html'),
		}),
		new CleanWebpackPlugin(),
		new MiniCssExtractPlugin({
			filename: production
				? 'static/styles/[name].[contenthash].css'
				: 'static/styles/[name].css',
		}),
		new webpack.EnvironmentPlugin({
			NODE_ENV: 'development', // значение по умолчанию 'development' если переменная process.env.NODE_ENV не передана
		}),
	],
};

================
File: webpack/webpack.config.js
================
const { merge } = require('webpack-merge');
const commonConfig = require('./webpack.common.js');

module.exports = (envVars) => {
	const { env } = envVars;
	const envConfig = require(`./webpack.${env}.js`);
	const config = merge(commonConfig, envConfig);
	return config;
};

================
File: webpack/webpack.dev.js
================
const path = require('path'); //для того чтобы превратить отнсительный путь в абсолютный мы будем использовать пакет path
const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');

module.exports = {
	mode: 'development',
	devtool: 'eval-source-map',
	devServer: {
		historyApiFallback: true,
		static: path.resolve(__dirname, './dist'), // путь, куда "смотрит" режим разработчика
		// compress: true, // это ускорит загрузку в режиме разработки
		port: 8080, // порт, чтобы открывать сайт по адресу localhost:8080, но можно поменять порт
		open: true, // сайт будет открываться сам при запуске npm run dev
		hot: true,
	},
	plugins: [new ReactRefreshWebpackPlugin()],
};

================
File: webpack/webpack.prod.js
================
module.exports = {
	mode: 'production',
	devtool: false,
};
